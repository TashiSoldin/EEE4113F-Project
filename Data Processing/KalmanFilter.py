import numpy as np
import matplotlib.pyplot as plt


signal = [46.30, 46.10, 46.10, 46.10, 46.10, 46.10, 46.10, 46.10, 46.10, 46.00, 46.00, 46.10, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 46.00, 45.90, 45.90, 45.80, 46.10, 46.00, 46.00, 46.00, 45.90, 51.00, 97.90, 172.90, 189.40, 113.10, 52.00, 41.60, 48.30, 45.00, 31.80, 9.70, 26.80, 99.70, 126.00, 103.70, 86.30, 79.80, 77.60, 72.50, 73.70, 74.20, 56.20, 24.70, 0.70, 0.30, 4.90, 39.30, 67.40, 86.50, 99.00, 95.10, 92.40, 103.10, 115.30, 115.90, 103.00, 99.70, 104.90, 107.20, 105.00, 90.80, 49.80, 13.10, -15.20, -16.70, -1.10, 49.40, 87.90, 122.90, 155.60, 152.70, 140.50, 128.10, 125.40, 140.00, 133.60, 61.50, -5.30, 34.70, 74.50, 106.80, 94.80, 78.10, 66.10, 67.30, 66.00, 69.70, 70.50, 47.00, 10.20, 1.30, 9.90, 70.20, 135.90, 184.80, 195.20, 168.20, 120.30, 45.80, 1.50, -0.10, 0.30, 0.50, 0.80, 23.40, 49.60, 76.40, 91.70, 91.30, 88.30, 90.30, 98.70, 111.40, 121.40, 110.70, 65.80, 40.00, 142.30, 170.10, 79.70, 4.60, 1.90, 34.40, 77.40, 95.40, 92.80, 83.50, 70.20, 60.60, 55.90, 56.00, 54.50, 53.30, 50.50, 42.40, 36.80, 31.70, 31.90, 33.90, 36.30, 39.90, 43.10, 48.30, 48.90, 50.70, 42.50, 30.50, 9.40, -4.60, -0.50, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20, 0.20]

def kalman_filter(signal):
    estimate = 42.0                     # initial estimate of the bird's weight in grams
    estimate_uncertainty = 50.0         # initial uncertainty of estimate - will be updated
    measured_uncertainty = 50.0         # initial uncertainty if measurement - will be updated
    output = np.zeros(len(signal))

    for i in range(len(signal)):
        if 42.0 <= signal[i] <= 60.0:

            gain = estimate_uncertainty / (estimate_uncertainty + measured_uncertainty)         # obtaining the filter gain
            estimate = estimate + gain * (signal[i] - estimate)                                 # updating the estimate 

            estimate_uncertainty = (1 - gain) * estimate_uncertainty                            # updating the estimate uncertainty
            output[i] = estimate

        output[i] = estimate

    return estimate

print(kalman_filter(signal))

